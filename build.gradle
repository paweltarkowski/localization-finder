buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10"
    }
}

ext {
    queryDslVersion = '4.1.3'
    lombokVersion = '1.16.10'
    junitVersion = '4.12'
    mockitoVersion = '1.10.19'
    hsqldbVersion = '2.2.8'
    geocoderVersion = '0.16'
    orikaVersion = '1.4.6'
    googleMapsServicesVersion = '0.1.15'
    googleCollectionVersion = '1.0'
    hamrestVersion = '1.3'
    objenesisVersion = '2.1'
    assertjCoreVersion = '2.5.0'
    thymeleafLayoutDialectVersion = '1.2.1'
    liquibaseVersion = '3.5.3'
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'com.ewerk.gradle.plugins.querydsl'

    jar {
        baseName = 'localization-finder'
        version = '0.0.1-SNAPSHOT'
    }

   querydsl {
        jpa = true
        querydslSourcesDir = "${projectDir}/build/querydsl/java"
        library = 'com.querydsl:querydsl-apt:4.2.1'
    }

    sourceSets {
        main {
            java {
                srcDir "${projectDir}/build/querydsl/java"
            }
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    task tableSetWorkaround {
        gradle.ext.generatedQueriesDir = "${projectDir}/build/querydsl/java"
        if ( file( gradle.ext.generatedQueriesDir ).exists() ) {
            FileCollection collection = files { file( gradle.ext.generatedQueriesDir ).listFiles() }
            collection.each { delete it }
        }
    }

    compileQuerydsl.dependsOn tableSetWorkaround
    compileQuerydsl.mustRunAfter tableSetWorkaround

    dependencies {
        // spring-boot
        compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
        compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")

        //libs
        compile("org.projectlombok:lombok:${lombokVersion}")
        compile("com.querydsl:querydsl-core:${queryDslVersion}")
        compile("com.querydsl:querydsl-jpa:${queryDslVersion}")
        compile("com.google.maps:google-maps-services:${googleMapsServicesVersion}")
        compile("org.hsqldb:hsqldb:${hsqldbVersion}")
        compile("com.google.code.geocoder-java:geocoder-java:${geocoderVersion}")
        compile("ma.glasnost.orika:orika-core:${orikaVersion}")
        compile("org.liquibase:liquibase-core:${liquibaseVersion}")

        //test libs
        testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.mockito:mockito-core:${mockitoVersion}")
        testCompile("org.assertj:assertj-core:${assertjCoreVersion}")
        testCompile("org.hamcrest:hamcrest-core:${hamrestVersion}")
        testCompile("org.hamcrest:hamcrest-library:${hamrestVersion}")
        testCompile("org.objenesis:objenesis:${objenesisVersion}")
    }
}

project(':localization-finder-main'){
    apply plugin: "org.springframework.boot"

    dependencies {
        compile project (':localization-finder-core')
        compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
        compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
        compile("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:${thymeleafLayoutDialectVersion}")
        compile("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    }

    bootRun {
        addResources = true
    }
}